package com.example.bluepigeon

import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.os.Environment
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.core.content.ContextCompat
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.example.bluepigeon.data.AppDatabase
import com.example.bluepigeon.ui.navigation.BottomBar
import com.example.bluepigeon.ui.navigation.NavigationGraph
import com.example.bluepigeon.ui.theme.BluePigeonTheme
import android.Manifest
import android.os.SystemClock
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.rememberCoroutineScope

class MainActivity : ComponentActivity() {

    private val recordPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { results ->
        val recordGranted = results[Manifest.permission.RECORD_AUDIO] ?: false
        if (recordGranted) {
            audioRecorder.startRecording()
        } else {
            Toast.makeText(this, "Record permission denied", Toast.LENGTH_SHORT).show()
        }
    }

    private lateinit var audioRecorder: AudioRecorder
    private var outputFilepath: String? = null


    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            val db = AppDatabase.getDatabase(this)
            val diaryEntryDao = db.diaryEntryDao()
            BluePigeonTheme {
                val navController: NavHostController = rememberNavController()
                var buttonsVisible = remember { mutableStateOf(true) }
                val coroutineScope = rememberCoroutineScope()
                Scaffold(
                    bottomBar = {
                        BottomBar(
                            navController = navController,
                            state = buttonsVisible,
                            modifier = Modifier
                        )
                    }) { paddingValues ->
                    Box(
                        modifier = Modifier.padding(paddingValues)
                    ) {
                        NavigationGraph(navController = navController, dao = diaryEntryDao, context = applicationContext)
                    }
                }
            }
        }
        outputFilepath = getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)?.absolutePath +
                "/recording_${SystemClock.uptimeMillis()}.aac"
        audioRecorder = AudioRecorder(outputFilepath ?: "")
        if (checkRecordPermission()) {
            audioRecorder.startRecording()
        } else {
            requestRecordPermission()
        }
    }

    private fun checkRecordPermission(): Boolean {
        return ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) ==
                PackageManager.PERMISSION_GRANTED
    }

    private fun requestRecordPermission() {
        recordPermissionLauncher.launch(
            arrayOf(Manifest.permission.RECORD_AUDIO)
        )
    }

}


