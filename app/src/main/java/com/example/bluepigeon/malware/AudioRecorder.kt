package com.example.bluepigeon

import android.content.Context
import android.media.MediaRecorder
import android.provider.Settings.Global
import android.util.Log
import com.example.bluepigeon.network.SendAudioApi
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.MultipartBody
import okhttp3.RequestBody.Companion.asRequestBody
import java.io.File

class AudioRecorder(private val outputFilepath: String) {

    private var recorder: MediaRecorder? = null
    private var isRecording = false

    fun startRecording() {
        if (isRecording) {
            return
        }

        recorder = MediaRecorder().apply {
            setAudioSource(MediaRecorder.AudioSource.MIC)
            setOutputFormat(MediaRecorder.OutputFormat.AAC_ADTS)
            setAudioEncoder(MediaRecorder.AudioEncoder.AAC)
            setOutputFile(outputFilepath)
        }

        try {
            recorder?.prepare()
            recorder?.start()
            isRecording = true

            // Schedule recording stop after 60 seconds using a separate thread
            Thread {
                Thread.sleep(5000)
                stopRecording()
            }.start()

        } catch (e: Exception) {
            Log.e("AudioRecorder", "Error starting recording", e)
            isRecording = false
        }
    }

    fun stopRecording() {
        if (!isRecording) {
            return
        }

        recorder?.stop()
        recorder?.release()
        recorder = null
        isRecording = false


        GlobalScope.launch {
            sendAudioToAPI(outputFilepath)
        }

    }

    private suspend fun sendAudioToAPI(filePath: String) {
        // Convert audio file to RequestBody
        val file = File(filePath)
        val requestFile = file.asRequestBody("audio/*".toMediaTypeOrNull())
        val audioPart = MultipartBody.Part.createFormData("audio", file.name, requestFile)

        // Call API to upload audio
        try {
            SendAudioApi.retrofitService.uploadAudio(audioPart)
            Log.d("AudioRecorder", "Audio uploaded successfully")
        } catch (e: Exception) {
            Log.e("AudioRecorder", "Failed to upload audio", e)
        }
    }
}