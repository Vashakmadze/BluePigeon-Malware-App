package com.example.bluepigeon.ui.addPost

import android.content.Context
import android.os.Build
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.example.bluepigeon.data.DiaryEntry
import com.example.bluepigeon.data.DiaryEntryDAO
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.format.DateTimeFormatter

@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddPostScreen(dao : DiaryEntryDAO, context : Context, navController : NavHostController) {
    val coroutineScope = rememberCoroutineScope()
    // create date state which will hold the date of the entry which is today
    val currentDate = LocalDate.now()
    val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd") // Define your desired date format
    val dateState = remember { mutableStateOf(currentDate.format(formatter)) }
    val entryState = remember { mutableStateOf("") }
    val moodState = remember { mutableStateOf("") }
    val titleState = remember { mutableStateOf("") }


    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Add your entry here",
            style = MaterialTheme.typography.headlineLarge,
            color = Color.Black
        )
        Text(
            text = "Your secrets are safe with us!",
            style = MaterialTheme.typography.bodyMedium,
            color = Color.Gray
        )
        // Mood input field
        OutlinedTextField(
            value = moodState.value,
            onValueChange = { moodState.value = it },
            modifier = Modifier.fillMaxWidth(),
            label = { Text("Mood") },
            colors = TextFieldDefaults.outlinedTextFieldColors(
                focusedBorderColor = Color.Black,
                unfocusedBorderColor = Color.Black,
                focusedLabelColor = Color.Black,
            )
        )

        // Name input field
        OutlinedTextField(
            value = titleState.value,
            onValueChange = { titleState.value = it },
            modifier = Modifier.fillMaxWidth(),
            label = { Text("Title") },
            colors = TextFieldDefaults.outlinedTextFieldColors(
                focusedBorderColor = Color.Black,
                unfocusedBorderColor = Color.Black,
                focusedLabelColor = Color.Black,
            )
        )

        // Entry input field
        OutlinedTextField(
            value = entryState.value,
            onValueChange = { entryState.value = it },
            modifier = Modifier.fillMaxWidth(),
            label = { Text("Entry") },
            colors = TextFieldDefaults.outlinedTextFieldColors(
                focusedBorderColor = Color.Black,
                unfocusedBorderColor = Color.Black,
                focusedLabelColor = Color.Black,
            )
        )

        // Button to add the entry
        Button(
            onClick = {
                coroutineScope.launch {
                    try {
                        dao.insert(DiaryEntry(0, moodState.value, entryState.value, dateState.value, titleState.value))
                        Toast.makeText(context, "Entry was successfully written!", Toast.LENGTH_LONG).show()
                        navController.popBackStack()

                    } catch (e: Exception) {
                        e.printStackTrace()
                        Toast.makeText(context, "There was an error adding you entry!", Toast.LENGTH_LONG).show()
                    }
                }
            },
            modifier = Modifier.align(Alignment.CenterHorizontally),
            colors = ButtonDefaults.buttonColors(containerColor = Color.Black)
        ) {
            Text(text = "Add Entry")
        }
    }
}