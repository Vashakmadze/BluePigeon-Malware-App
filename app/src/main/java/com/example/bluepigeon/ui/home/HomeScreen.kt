package com.example.bluepigeon.ui.home

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import com.example.bluepigeon.data.DiaryEntry
import com.example.bluepigeon.data.DiaryEntryDAO
import com.example.bluepigeon.model.QuoteModel
import com.example.bluepigeon.network.RandomQuoteApi

suspend fun getQuote() : String {
    try {
        val quotes = RandomQuoteApi.retrofitService.getQuotes()
        if (quotes.isNotEmpty()) {
            val quote : QuoteModel = quotes.random()
            return quote.text + " - " + quote.author.split(",")[0]
        }
    } catch (e: Exception) {
        // Handle error
        println(e)
    }
    return "No quotes today"
}

@Composable
fun HomeScreen(dao : DiaryEntryDAO) {
//    val diaryEntries = listOf(
//        DiaryEntry( "March 5, 2024", "Happy", "John", "I had a great day today!"),
//        DiaryEntry( "March 4, 2024", "Sad", "Alice", "I had a bad day today!"),
//        DiaryEntry( "March 3, 2024", "Excited", "Bob", "I had an exciting day today!"),
//    )

    // State to hold the fetched quote
    var quoteState = remember { mutableStateOf("A private note and diary taking app") }



    // Fetch the quote asynchronously when the composable is first drawn
    LaunchedEffect(key1 = Unit) {
        quoteState.value = getQuote()
    }
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(color = Color.White)
            .wrapContentSize(Alignment.TopStart)
            .padding(25.dp)
    ) {
        Text(
            text = "Welcome to BluePigeon",
            style = MaterialTheme.typography.headlineLarge,
            color = Color.Black
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = quoteState.value,
            style = MaterialTheme.typography.bodyMedium,
            color = Color.Gray
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "Your Entries",
            style = MaterialTheme.typography.headlineMedium,
            color = Color.Black
        )
        Spacer(modifier = Modifier.height(8.dp))
        // Display list of diary/note entries
//        DiaryEntryList(entries = diaryEntries)
    }
}

//@Composable
//fun DiaryEntryList(entries: List<DiaryEntry>) {
//    LazyColumn {
//        this.items(entries.size) { entry ->
//            Box(
//                modifier = Modifier
//                    .padding(vertical = 8.dp)
//                    .background(Color.White)
//                    .border(1.dp, Color.LightGray, shape = RoundedCornerShape(8.dp))
//                    .fillMaxWidth()
//
//            ) {
//                Column(
//                    modifier = Modifier.padding(8.dp)
//                ) {
//                    Text(
//                        text = entry.date,
//                        style = MaterialTheme.typography.bodySmall,
//                        color = Color.Black
//                    )
//                    Spacer(modifier = Modifier.height(4.dp))
//                    Text(
//                        text = "Mood: ${entry.mood}",
//                        style = MaterialTheme.typography.bodyMedium,
//                        color = Color.Gray
//                    )
//                    Spacer(modifier = Modifier.height(4.dp))
//                    Text(
//                        text = "Name: ${entry.name}",
//                        style = MaterialTheme.typography.bodyMedium,
//                        color = Color.Gray
//                    )
//                    Spacer(modifier = Modifier.height(4.dp))
//                    Text(
//                        text = entry.entry,
//                        style = MaterialTheme.typography.bodyMedium,
//                        color = Color.Black
//                    )
//                }
//            }
//
//        }
//    }
//}
